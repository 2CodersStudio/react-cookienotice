// vite.config.ts
import { resolve } from "node:path";
import react from "file:///Users/davidcl/Desktop/cookies/react-cookienotice/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///Users/davidcl/Desktop/cookies/react-cookienotice/node_modules/vite/dist/node/index.js";
import banner from "file:///Users/davidcl/Desktop/cookies/react-cookienotice/node_modules/vite-plugin-banner/dist/index.mjs";
import dts from "file:///Users/davidcl/Desktop/cookies/react-cookienotice/node_modules/vite-plugin-dts/dist/index.mjs";
import * as EsLint from "file:///Users/davidcl/Desktop/cookies/react-cookienotice/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///Users/davidcl/Desktop/cookies/react-cookienotice/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var name = "react-cookienotice";
var version = "6.0.3";
var author = "xavierbriole";
var license = "MIT";
var peerDependencies = {
  react: "16.8.0 || >=17.x",
  "react-dom": "16.8.0 || >=17.x"
};

// vite.config.ts
var { EsLinter, linterPlugin } = EsLint;
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/"]
    }),
    banner(
      `/**
 * ${name} v${version}
 * (c) 2020-${(/* @__PURE__ */ new Date()).getFullYear()} by ${author}
 * Released under the ${license} License.
 */`
    )
  ],
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: resolve("src", "setupTests.ts")
  },
  build: {
    lib: {
      entry: resolve("src", "index.ts"),
      name: "ReactCookieNotice",
      formats: ["es", "umd"],
      fileName: (format) => `react-cookienotice.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
